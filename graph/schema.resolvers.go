package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"test/graph/generated"
	"test/graph/model"
	"test/initializers"
	"time"

	jwt "github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, name string, email string, password string, embedding []float64) (*model.User, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	res, err := initializers.DB.Exec("INSERT INTO users (name, email, password) VALUES (?, ?, ?)", name, email, string(hashedPassword))
	if err != nil {
		return nil, fmt.Errorf("failed to insert user: %w", err)
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, fmt.Errorf("failed to get inserted id: %w", err)
	}

	user := &model.User{
		ID:    strconv.FormatInt(id, 10),
		Name:  name,
		Email: email,
	}
	return user, nil
}

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	// Look up the user
	row := initializers.DB.QueryRow("SELECT id, name, email, password FROM users WHERE email = ?", email)
	var id int64
	var name, dbEmail, dbHashedPassword string
	err := row.Scan(&id, &name, &dbEmail, &dbHashedPassword)
	if err != nil {
		return nil, fmt.Errorf("user not found")
	}

	// Compare passwords
	err = bcrypt.CompareHashAndPassword([]byte(dbHashedPassword), []byte(password))
	if err != nil {
		return nil, fmt.Errorf("invalid credentials")
	}

	// Generate JWT
	secret := os.Getenv("JWT_SECRET")
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id": id,
		"email":   dbEmail,
		"exp":     time.Now().Add(time.Hour * 72).Unix(),
	})
	tokenString, err := token.SignedString([]byte(secret))
	if err != nil {
		return nil, fmt.Errorf("failed to generate token")
	}

	user := &model.User{
		ID:    fmt.Sprintf("%d", id),
		Name:  name,
		Email: dbEmail,
	}

	return &model.AuthPayload{
		Token: tokenString,
		User:  user,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	rows, err := initializers.DB.Query("SELECT id, name, email FROM users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []*model.User
	for rows.Next() {
		var id int64
		var name, email string
		if err := rows.Scan(&id, &name, &email); err != nil {
			return nil, err
		}
		users = append(users, &model.User{
			ID:    fmt.Sprintf("%d", id),
			Name:  name,
			Email: email,
		})
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}

// SearchUsersByVector is the resolver for the searchUsersByVector field.
func (r *queryResolver) SearchUsersByVector(ctx context.Context, vector []float64, topK int) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: SearchUsersByVector - searchUsersByVector"))
}

// Embedding is the resolver for the embedding field.
func (r *userResolver) Embedding(ctx context.Context, obj *model.User) ([]float64, error) {
	panic(fmt.Errorf("not implemented: Embedding - embedding"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
